definitions:
  models.Device:
    properties:
      id:
        type: integer
      ip_address:
        type: string
      last_active:
        type: string
      user_agent:
        type: string
    type: object
  models.DeviceList:
    properties:
      current_device_id:
        type: integer
      devices:
        items:
          $ref: '#/definitions/models.Device'
        type: array
    type: object
  models.LikeVideoResponse:
    properties:
      id:
        type: string
      thumbnail_url:
        type: string
      title:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.SignupRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UpdateEmailRequest:
    properties:
      email:
        type: string
    type: object
info:
  contact: {}
  description: This is the API documentation for the AltTube application.
  title: AltTube API
  version: "1.0"
paths:
  /like/:
    get:
      consumes:
      - application/json
      description: Get liked videos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LikeVideoResponse'
            type: array
      security:
      - AccessToken: []
      summary: Get liked videos
      tags:
      - like
  /like/{videoID}:
    delete:
      consumes:
      - application/json
      description: Remove like from video
      parameters:
      - description: Video ID
        in: path
        name: videoID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Video like removed successfully"}'
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Remove like from video
      tags:
      - like
    get:
      consumes:
      - application/json
      description: Get like status of video
      parameters:
      - description: Video ID
        in: path
        name: videoID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"is_liked": "true"}'
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Get like status of video
      tags:
      - like
    post:
      consumes:
      - application/json
      description: Add like to video
      parameters:
      - description: Video ID
        in: path
        name: videoID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Video liked successfully"}'
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Add like to video
      tags:
      - like
  /ping:
    get:
      consumes:
      - application/json
      description: ping
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "pong"}'
          schema:
            type: string
      summary: ping
      tags:
      - ping
  /piped/opensearch/suggestions:
    get:
      consumes:
      - application/json
      description: Suggestions
      parameters:
      - description: Query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Suggestions
          schema:
            type: string
      summary: Suggestions
      tags:
      - piped
  /piped/search:
    get:
      consumes:
      - application/json
      description: Search
      parameters:
      - description: Query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            type: string
      summary: Search
      tags:
      - piped
  /piped/streams/{videoID}:
    get:
      consumes:
      - application/json
      description: Get video streams by video ID
      parameters:
      - description: Video ID
        in: path
        name: videoID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Video streams
          schema:
            type: string
      summary: Get video streams
      tags:
      - piped
  /user/:
    delete:
      consumes:
      - application/json
      description: Delete user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User deleted successfully"}'
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Delete user
      tags:
      - user
  /user/devices:
    delete:
      consumes:
      - application/json
      description: Delete devices
      parameters:
      - description: Devices to be deleted
        in: body
        name: devices
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Devices deleted successfully", "deleted": [1,
            2, 3]}'
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Delete devices
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get devices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeviceList'
      security:
      - AccessToken: []
      summary: Get devices
      tags:
      - user
  /user/email:
    patch:
      consumes:
      - application/json
      description: Edit email
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Email updated successfully"}'
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Edit email
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"access_token": "access_token", "refresh_token": "refresh_token"}'
          schema:
            type: string
      summary: Login
      tags:
      - user
  /user/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Logged out successfully"}'
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Logout user
      tags:
      - user
  /user/refresh_token:
    post:
      consumes:
      - application/json
      description: Refresh token
      produces:
      - application/json
      responses:
        "200":
          description: '{"access_token": "access_token", "refresh_token": "refresh_token"}'
          schema:
            type: string
      security:
      - RefreshToken: []
      summary: Refresh token
      tags:
      - user
  /user/signup:
    post:
      consumes:
      - application/json
      description: Signup
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Registration successful"}'
          schema:
            type: string
      summary: Signup
      tags:
      - user
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    type: apiKey
  RefreshToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

// Code generated by ent, DO NOT EDIT.

package video

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hackinggate/alttube-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUpdateTime, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDescription, v))
}

// UploadDate applies equality check predicate on the "uploadDate" field. It's identical to UploadDateEQ.
func UploadDate(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploadDate, v))
}

// Uploader applies equality check predicate on the "uploader" field. It's identical to UploaderEQ.
func Uploader(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploader, v))
}

// UploaderUrl applies equality check predicate on the "uploaderUrl" field. It's identical to UploaderUrlEQ.
func UploaderUrl(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploaderUrl, v))
}

// ThumbnailUrl applies equality check predicate on the "thumbnailUrl" field. It's identical to ThumbnailUrlEQ.
func ThumbnailUrl(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldThumbnailUrl, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUpdateTime, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldDescription, v))
}

// UploadDateEQ applies the EQ predicate on the "uploadDate" field.
func UploadDateEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploadDate, v))
}

// UploadDateNEQ applies the NEQ predicate on the "uploadDate" field.
func UploadDateNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUploadDate, v))
}

// UploadDateIn applies the In predicate on the "uploadDate" field.
func UploadDateIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUploadDate, vs...))
}

// UploadDateNotIn applies the NotIn predicate on the "uploadDate" field.
func UploadDateNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUploadDate, vs...))
}

// UploadDateGT applies the GT predicate on the "uploadDate" field.
func UploadDateGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUploadDate, v))
}

// UploadDateGTE applies the GTE predicate on the "uploadDate" field.
func UploadDateGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUploadDate, v))
}

// UploadDateLT applies the LT predicate on the "uploadDate" field.
func UploadDateLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUploadDate, v))
}

// UploadDateLTE applies the LTE predicate on the "uploadDate" field.
func UploadDateLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUploadDate, v))
}

// UploaderEQ applies the EQ predicate on the "uploader" field.
func UploaderEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploader, v))
}

// UploaderNEQ applies the NEQ predicate on the "uploader" field.
func UploaderNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUploader, v))
}

// UploaderIn applies the In predicate on the "uploader" field.
func UploaderIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUploader, vs...))
}

// UploaderNotIn applies the NotIn predicate on the "uploader" field.
func UploaderNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUploader, vs...))
}

// UploaderGT applies the GT predicate on the "uploader" field.
func UploaderGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUploader, v))
}

// UploaderGTE applies the GTE predicate on the "uploader" field.
func UploaderGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUploader, v))
}

// UploaderLT applies the LT predicate on the "uploader" field.
func UploaderLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUploader, v))
}

// UploaderLTE applies the LTE predicate on the "uploader" field.
func UploaderLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUploader, v))
}

// UploaderContains applies the Contains predicate on the "uploader" field.
func UploaderContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldUploader, v))
}

// UploaderHasPrefix applies the HasPrefix predicate on the "uploader" field.
func UploaderHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldUploader, v))
}

// UploaderHasSuffix applies the HasSuffix predicate on the "uploader" field.
func UploaderHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldUploader, v))
}

// UploaderEqualFold applies the EqualFold predicate on the "uploader" field.
func UploaderEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldUploader, v))
}

// UploaderContainsFold applies the ContainsFold predicate on the "uploader" field.
func UploaderContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldUploader, v))
}

// UploaderUrlEQ applies the EQ predicate on the "uploaderUrl" field.
func UploaderUrlEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploaderUrl, v))
}

// UploaderUrlNEQ applies the NEQ predicate on the "uploaderUrl" field.
func UploaderUrlNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUploaderUrl, v))
}

// UploaderUrlIn applies the In predicate on the "uploaderUrl" field.
func UploaderUrlIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUploaderUrl, vs...))
}

// UploaderUrlNotIn applies the NotIn predicate on the "uploaderUrl" field.
func UploaderUrlNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUploaderUrl, vs...))
}

// UploaderUrlGT applies the GT predicate on the "uploaderUrl" field.
func UploaderUrlGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUploaderUrl, v))
}

// UploaderUrlGTE applies the GTE predicate on the "uploaderUrl" field.
func UploaderUrlGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUploaderUrl, v))
}

// UploaderUrlLT applies the LT predicate on the "uploaderUrl" field.
func UploaderUrlLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUploaderUrl, v))
}

// UploaderUrlLTE applies the LTE predicate on the "uploaderUrl" field.
func UploaderUrlLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUploaderUrl, v))
}

// UploaderUrlContains applies the Contains predicate on the "uploaderUrl" field.
func UploaderUrlContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldUploaderUrl, v))
}

// UploaderUrlHasPrefix applies the HasPrefix predicate on the "uploaderUrl" field.
func UploaderUrlHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldUploaderUrl, v))
}

// UploaderUrlHasSuffix applies the HasSuffix predicate on the "uploaderUrl" field.
func UploaderUrlHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldUploaderUrl, v))
}

// UploaderUrlEqualFold applies the EqualFold predicate on the "uploaderUrl" field.
func UploaderUrlEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldUploaderUrl, v))
}

// UploaderUrlContainsFold applies the ContainsFold predicate on the "uploaderUrl" field.
func UploaderUrlContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldUploaderUrl, v))
}

// ThumbnailUrlEQ applies the EQ predicate on the "thumbnailUrl" field.
func ThumbnailUrlEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldThumbnailUrl, v))
}

// ThumbnailUrlNEQ applies the NEQ predicate on the "thumbnailUrl" field.
func ThumbnailUrlNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldThumbnailUrl, v))
}

// ThumbnailUrlIn applies the In predicate on the "thumbnailUrl" field.
func ThumbnailUrlIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldThumbnailUrl, vs...))
}

// ThumbnailUrlNotIn applies the NotIn predicate on the "thumbnailUrl" field.
func ThumbnailUrlNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldThumbnailUrl, vs...))
}

// ThumbnailUrlGT applies the GT predicate on the "thumbnailUrl" field.
func ThumbnailUrlGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldThumbnailUrl, v))
}

// ThumbnailUrlGTE applies the GTE predicate on the "thumbnailUrl" field.
func ThumbnailUrlGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldThumbnailUrl, v))
}

// ThumbnailUrlLT applies the LT predicate on the "thumbnailUrl" field.
func ThumbnailUrlLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldThumbnailUrl, v))
}

// ThumbnailUrlLTE applies the LTE predicate on the "thumbnailUrl" field.
func ThumbnailUrlLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldThumbnailUrl, v))
}

// ThumbnailUrlContains applies the Contains predicate on the "thumbnailUrl" field.
func ThumbnailUrlContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldThumbnailUrl, v))
}

// ThumbnailUrlHasPrefix applies the HasPrefix predicate on the "thumbnailUrl" field.
func ThumbnailUrlHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldThumbnailUrl, v))
}

// ThumbnailUrlHasSuffix applies the HasSuffix predicate on the "thumbnailUrl" field.
func ThumbnailUrlHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldThumbnailUrl, v))
}

// ThumbnailUrlEqualFold applies the EqualFold predicate on the "thumbnailUrl" field.
func ThumbnailUrlEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldThumbnailUrl, v))
}

// ThumbnailUrlContainsFold applies the ContainsFold predicate on the "thumbnailUrl" field.
func ThumbnailUrlContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldThumbnailUrl, v))
}

// HasLikeVideos applies the HasEdge predicate on the "like_videos" edge.
func HasLikeVideos() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikeVideosTable, LikeVideosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikeVideosWith applies the HasEdge predicate on the "like_videos" edge with a given conditions (other predicates).
func HasLikeVideosWith(preds ...predicate.LikeVideo) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := newLikeVideosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Video) predicate.Video {
	return predicate.Video(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package video

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the video type in the database.
	Label = "video"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUploadDate holds the string denoting the upload_date field in the database.
	FieldUploadDate = "upload_date"
	// FieldUploader holds the string denoting the uploader field in the database.
	FieldUploader = "uploader"
	// FieldUploaderURL holds the string denoting the uploader_url field in the database.
	FieldUploaderURL = "uploader_url"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// EdgeLikeVideos holds the string denoting the like_videos edge name in mutations.
	EdgeLikeVideos = "like_videos"
	// Table holds the table name of the video in the database.
	Table = "videos"
	// LikeVideosTable is the table that holds the like_videos relation/edge.
	LikeVideosTable = "like_videos"
	// LikeVideosInverseTable is the table name for the LikeVideo entity.
	// It exists in this package in order to avoid circular dependency with the "likevideo" package.
	LikeVideosInverseTable = "like_videos"
	// LikeVideosColumn is the table column denoting the like_videos relation/edge.
	LikeVideosColumn = "video_id"
)

// Columns holds all SQL columns for video fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldTitle,
	FieldDescription,
	FieldUploadDate,
	FieldUploader,
	FieldUploaderURL,
	FieldThumbnailURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// UploaderValidator is a validator for the "uploader" field. It is called by the builders before save.
	UploaderValidator func(string) error
	// UploaderURLValidator is a validator for the "uploader_url" field. It is called by the builders before save.
	UploaderURLValidator func(string) error
	// ThumbnailURLValidator is a validator for the "thumbnail_url" field. It is called by the builders before save.
	ThumbnailURLValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Video queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUploadDate orders the results by the upload_date field.
func ByUploadDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadDate, opts...).ToFunc()
}

// ByUploader orders the results by the uploader field.
func ByUploader(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploader, opts...).ToFunc()
}

// ByUploaderURL orders the results by the uploader_url field.
func ByUploaderURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploaderURL, opts...).ToFunc()
}

// ByThumbnailURL orders the results by the thumbnail_url field.
func ByThumbnailURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnailURL, opts...).ToFunc()
}

// ByLikeVideosCount orders the results by like_videos count.
func ByLikeVideosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikeVideosStep(), opts...)
	}
}

// ByLikeVideos orders the results by like_videos terms.
func ByLikeVideos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikeVideosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLikeVideosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikeVideosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LikeVideosTable, LikeVideosColumn),
	)
}

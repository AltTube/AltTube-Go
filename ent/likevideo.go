// Code generated by ent, DO NOT EDIT.

package ent

import (
	"AltTube-Go/ent/likevideo"
	"AltTube-Go/ent/user"
	"AltTube-Go/ent/video"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// LikeVideo is the model entity for the LikeVideo schema.
type LikeVideo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID string `json:"video_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikeVideoQuery when eager-loading is set.
	Edges        LikeVideoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LikeVideoEdges holds the relations/edges for other nodes in the graph.
type LikeVideoEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Video holds the value of the video edge.
	Video *Video `json:"video,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeVideoEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeVideoEdges) VideoOrErr() (*Video, error) {
	if e.Video != nil {
		return e.Video, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: video.Label}
	}
	return nil, &NotLoadedError{edge: "video"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LikeVideo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case likevideo.FieldID:
			values[i] = new(sql.NullInt64)
		case likevideo.FieldVideoID:
			values[i] = new(sql.NullString)
		case likevideo.FieldCreateTime, likevideo.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case likevideo.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LikeVideo fields.
func (lv *LikeVideo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case likevideo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lv.ID = int(value.Int64)
		case likevideo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				lv.CreateTime = value.Time
			}
		case likevideo.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				lv.UpdateTime = value.Time
			}
		case likevideo.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				lv.UserID = *value
			}
		case likevideo.FieldVideoID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				lv.VideoID = value.String
			}
		default:
			lv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LikeVideo.
// This includes values selected through modifiers, order, etc.
func (lv *LikeVideo) Value(name string) (ent.Value, error) {
	return lv.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the LikeVideo entity.
func (lv *LikeVideo) QueryUser() *UserQuery {
	return NewLikeVideoClient(lv.config).QueryUser(lv)
}

// QueryVideo queries the "video" edge of the LikeVideo entity.
func (lv *LikeVideo) QueryVideo() *VideoQuery {
	return NewLikeVideoClient(lv.config).QueryVideo(lv)
}

// Update returns a builder for updating this LikeVideo.
// Note that you need to call LikeVideo.Unwrap() before calling this method if this LikeVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (lv *LikeVideo) Update() *LikeVideoUpdateOne {
	return NewLikeVideoClient(lv.config).UpdateOne(lv)
}

// Unwrap unwraps the LikeVideo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lv *LikeVideo) Unwrap() *LikeVideo {
	_tx, ok := lv.config.driver.(*txDriver)
	if !ok {
		panic("ent: LikeVideo is not a transactional entity")
	}
	lv.config.driver = _tx.drv
	return lv
}

// String implements the fmt.Stringer.
func (lv *LikeVideo) String() string {
	var builder strings.Builder
	builder.WriteString("LikeVideo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lv.ID))
	builder.WriteString("create_time=")
	builder.WriteString(lv.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(lv.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", lv.UserID))
	builder.WriteString(", ")
	builder.WriteString("video_id=")
	builder.WriteString(lv.VideoID)
	builder.WriteByte(')')
	return builder.String()
}

// LikeVideos is a parsable slice of LikeVideo.
type LikeVideos []*LikeVideo

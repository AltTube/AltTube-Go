// Code generated by ent, DO NOT EDIT.

package ent

import (
	"AltTube-Go/ent/likevideo"
	"AltTube-Go/ent/predicate"
	"AltTube-Go/ent/user"
	"AltTube-Go/ent/video"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LikeVideoUpdate is the builder for updating LikeVideo entities.
type LikeVideoUpdate struct {
	config
	hooks    []Hook
	mutation *LikeVideoMutation
}

// Where appends a list predicates to the LikeVideoUpdate builder.
func (lvu *LikeVideoUpdate) Where(ps ...predicate.LikeVideo) *LikeVideoUpdate {
	lvu.mutation.Where(ps...)
	return lvu
}

// SetUpdateTime sets the "update_time" field.
func (lvu *LikeVideoUpdate) SetUpdateTime(t time.Time) *LikeVideoUpdate {
	lvu.mutation.SetUpdateTime(t)
	return lvu
}

// SetUserID sets the "user_id" field.
func (lvu *LikeVideoUpdate) SetUserID(s string) *LikeVideoUpdate {
	lvu.mutation.SetUserID(s)
	return lvu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lvu *LikeVideoUpdate) SetNillableUserID(s *string) *LikeVideoUpdate {
	if s != nil {
		lvu.SetUserID(*s)
	}
	return lvu
}

// SetVideoID sets the "video_id" field.
func (lvu *LikeVideoUpdate) SetVideoID(s string) *LikeVideoUpdate {
	lvu.mutation.SetVideoID(s)
	return lvu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (lvu *LikeVideoUpdate) SetNillableVideoID(s *string) *LikeVideoUpdate {
	if s != nil {
		lvu.SetVideoID(*s)
	}
	return lvu
}

// SetUser sets the "user" edge to the User entity.
func (lvu *LikeVideoUpdate) SetUser(u *User) *LikeVideoUpdate {
	return lvu.SetUserID(u.ID)
}

// SetVideo sets the "video" edge to the Video entity.
func (lvu *LikeVideoUpdate) SetVideo(v *Video) *LikeVideoUpdate {
	return lvu.SetVideoID(v.ID)
}

// Mutation returns the LikeVideoMutation object of the builder.
func (lvu *LikeVideoUpdate) Mutation() *LikeVideoMutation {
	return lvu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lvu *LikeVideoUpdate) ClearUser() *LikeVideoUpdate {
	lvu.mutation.ClearUser()
	return lvu
}

// ClearVideo clears the "video" edge to the Video entity.
func (lvu *LikeVideoUpdate) ClearVideo() *LikeVideoUpdate {
	lvu.mutation.ClearVideo()
	return lvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lvu *LikeVideoUpdate) Save(ctx context.Context) (int, error) {
	lvu.defaults()
	return withHooks(ctx, lvu.sqlSave, lvu.mutation, lvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lvu *LikeVideoUpdate) SaveX(ctx context.Context) int {
	affected, err := lvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lvu *LikeVideoUpdate) Exec(ctx context.Context) error {
	_, err := lvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvu *LikeVideoUpdate) ExecX(ctx context.Context) {
	if err := lvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lvu *LikeVideoUpdate) defaults() {
	if _, ok := lvu.mutation.UpdateTime(); !ok {
		v := likevideo.UpdateDefaultUpdateTime()
		lvu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lvu *LikeVideoUpdate) check() error {
	if lvu.mutation.UserCleared() && len(lvu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikeVideo.user"`)
	}
	if lvu.mutation.VideoCleared() && len(lvu.mutation.VideoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikeVideo.video"`)
	}
	return nil
}

func (lvu *LikeVideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(likevideo.Table, likevideo.Columns, sqlgraph.NewFieldSpec(likevideo.FieldID, field.TypeInt))
	if ps := lvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lvu.mutation.UpdateTime(); ok {
		_spec.SetField(likevideo.FieldUpdateTime, field.TypeTime, value)
	}
	if lvu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.UserTable,
			Columns: []string{likevideo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.UserTable,
			Columns: []string{likevideo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lvu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.VideoTable,
			Columns: []string{likevideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.VideoTable,
			Columns: []string{likevideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likevideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lvu.mutation.done = true
	return n, nil
}

// LikeVideoUpdateOne is the builder for updating a single LikeVideo entity.
type LikeVideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikeVideoMutation
}

// SetUpdateTime sets the "update_time" field.
func (lvuo *LikeVideoUpdateOne) SetUpdateTime(t time.Time) *LikeVideoUpdateOne {
	lvuo.mutation.SetUpdateTime(t)
	return lvuo
}

// SetUserID sets the "user_id" field.
func (lvuo *LikeVideoUpdateOne) SetUserID(s string) *LikeVideoUpdateOne {
	lvuo.mutation.SetUserID(s)
	return lvuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lvuo *LikeVideoUpdateOne) SetNillableUserID(s *string) *LikeVideoUpdateOne {
	if s != nil {
		lvuo.SetUserID(*s)
	}
	return lvuo
}

// SetVideoID sets the "video_id" field.
func (lvuo *LikeVideoUpdateOne) SetVideoID(s string) *LikeVideoUpdateOne {
	lvuo.mutation.SetVideoID(s)
	return lvuo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (lvuo *LikeVideoUpdateOne) SetNillableVideoID(s *string) *LikeVideoUpdateOne {
	if s != nil {
		lvuo.SetVideoID(*s)
	}
	return lvuo
}

// SetUser sets the "user" edge to the User entity.
func (lvuo *LikeVideoUpdateOne) SetUser(u *User) *LikeVideoUpdateOne {
	return lvuo.SetUserID(u.ID)
}

// SetVideo sets the "video" edge to the Video entity.
func (lvuo *LikeVideoUpdateOne) SetVideo(v *Video) *LikeVideoUpdateOne {
	return lvuo.SetVideoID(v.ID)
}

// Mutation returns the LikeVideoMutation object of the builder.
func (lvuo *LikeVideoUpdateOne) Mutation() *LikeVideoMutation {
	return lvuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lvuo *LikeVideoUpdateOne) ClearUser() *LikeVideoUpdateOne {
	lvuo.mutation.ClearUser()
	return lvuo
}

// ClearVideo clears the "video" edge to the Video entity.
func (lvuo *LikeVideoUpdateOne) ClearVideo() *LikeVideoUpdateOne {
	lvuo.mutation.ClearVideo()
	return lvuo
}

// Where appends a list predicates to the LikeVideoUpdate builder.
func (lvuo *LikeVideoUpdateOne) Where(ps ...predicate.LikeVideo) *LikeVideoUpdateOne {
	lvuo.mutation.Where(ps...)
	return lvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lvuo *LikeVideoUpdateOne) Select(field string, fields ...string) *LikeVideoUpdateOne {
	lvuo.fields = append([]string{field}, fields...)
	return lvuo
}

// Save executes the query and returns the updated LikeVideo entity.
func (lvuo *LikeVideoUpdateOne) Save(ctx context.Context) (*LikeVideo, error) {
	lvuo.defaults()
	return withHooks(ctx, lvuo.sqlSave, lvuo.mutation, lvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lvuo *LikeVideoUpdateOne) SaveX(ctx context.Context) *LikeVideo {
	node, err := lvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lvuo *LikeVideoUpdateOne) Exec(ctx context.Context) error {
	_, err := lvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvuo *LikeVideoUpdateOne) ExecX(ctx context.Context) {
	if err := lvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lvuo *LikeVideoUpdateOne) defaults() {
	if _, ok := lvuo.mutation.UpdateTime(); !ok {
		v := likevideo.UpdateDefaultUpdateTime()
		lvuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lvuo *LikeVideoUpdateOne) check() error {
	if lvuo.mutation.UserCleared() && len(lvuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikeVideo.user"`)
	}
	if lvuo.mutation.VideoCleared() && len(lvuo.mutation.VideoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikeVideo.video"`)
	}
	return nil
}

func (lvuo *LikeVideoUpdateOne) sqlSave(ctx context.Context) (_node *LikeVideo, err error) {
	if err := lvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(likevideo.Table, likevideo.Columns, sqlgraph.NewFieldSpec(likevideo.FieldID, field.TypeInt))
	id, ok := lvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LikeVideo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likevideo.FieldID)
		for _, f := range fields {
			if !likevideo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != likevideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lvuo.mutation.UpdateTime(); ok {
		_spec.SetField(likevideo.FieldUpdateTime, field.TypeTime, value)
	}
	if lvuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.UserTable,
			Columns: []string{likevideo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.UserTable,
			Columns: []string{likevideo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lvuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.VideoTable,
			Columns: []string{likevideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likevideo.VideoTable,
			Columns: []string{likevideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LikeVideo{config: lvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likevideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lvuo.mutation.done = true
	return _node, nil
}
